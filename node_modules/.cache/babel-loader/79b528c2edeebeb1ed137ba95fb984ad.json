{"ast":null,"code":"var _jsxFileName = \"C:\\\\hw02-express\\\\expense-tracker\\\\src\\\\components\\\\TransactionsChart\\\\ExpenseChart.jsx\",\n  _s = $RefreshSig$();\n// src/components/ExpenseChart/ExpenseChart.jsx\nimport React, { useMemo, useState } from 'react';\nimport { Doughnut } from 'react-chartjs-2'; // Using Chart.js for rendering the chart\nimport styles from './ExpenseChart.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ExpenseChart = _ref => {\n  _s();\n  let {\n    transactions\n  } = _ref;\n  const [totalExpenses, setTotalExpenses] = useState(0);\n  const categories = useMemo(() => {\n    const categoryMap = {};\n    let total = 0;\n    transactions.forEach(_ref2 => {\n      let {\n        category,\n        amount\n      } = _ref2;\n      total += amount;\n      if (!categoryMap[category]) {\n        categoryMap[category] = 0;\n      }\n      categoryMap[category] += amount;\n    });\n    setTotalExpenses(total);\n    return Object.entries(categoryMap).map(_ref3 => {\n      let [name, amount] = _ref3;\n      return {\n        name,\n        amount\n      };\n    });\n  }, [transactions]);\n  const data = useMemo(() => ({\n    labels: categories.map(category => category.name),\n    datasets: [{\n      data: categories.map(category => category.amount),\n      backgroundColor: categories.map((_, index) => `hsl(${index * 50}, 70%, 50%)`)\n    }]\n  }), [categories]);\n  const options = {\n    cutout: '70%',\n    plugins: {\n      tooltip: {\n        callbacks: {\n          label: function (tooltipItem) {\n            const percentage = (tooltipItem.raw / totalExpenses * 100).toFixed(2);\n            return `${tooltipItem.label}: ${percentage}%`;\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.expenseChartContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Total Expenses This Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), transactions.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Doughnut, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: styles.categoryList,\n        children: categories.map((category, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: styles.categoryItem,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: styles.marker,\n            style: {\n              backgroundColor: `hsl(${index * 50}, 70%, 50%)`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [category.name, \": \", (category.amount / totalExpenses * 100).toFixed(2), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 17\n          }, this)]\n        }, category.name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No transactions available for this month.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpenseChart, \"WS/6FZoCdES3YiFGlN44D8HAZzk=\");\n_c = ExpenseChart;\nexport default ExpenseChart;\nvar _c;\n$RefreshReg$(_c, \"ExpenseChart\");","map":{"version":3,"names":["React","useMemo","useState","Doughnut","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","ExpenseChart","_ref","_s","transactions","totalExpenses","setTotalExpenses","categories","categoryMap","total","forEach","_ref2","category","amount","Object","entries","map","_ref3","name","data","labels","datasets","backgroundColor","_","index","options","cutout","plugins","tooltip","callbacks","label","tooltipItem","percentage","raw","toFixed","className","expenseChartContainer","children","fileName","_jsxFileName","lineNumber","columnNumber","length","categoryList","categoryItem","marker","style","_c","$RefreshReg$"],"sources":["C:/hw02-express/expense-tracker/src/components/TransactionsChart/ExpenseChart.jsx"],"sourcesContent":["// src/components/ExpenseChart/ExpenseChart.jsx\r\nimport React, { useMemo, useState } from 'react';\r\nimport { Doughnut } from 'react-chartjs-2'; // Using Chart.js for rendering the chart\r\nimport styles from './ExpenseChart.module.css';\r\n\r\nconst ExpenseChart = ({ transactions }) => {\r\n  const [totalExpenses, setTotalExpenses] = useState(0);\r\n\r\n  const categories = useMemo(() => {\r\n    const categoryMap = {};\r\n    let total = 0;\r\n\r\n    transactions.forEach(({ category, amount }) => {\r\n      total += amount;\r\n      if (!categoryMap[category]) {\r\n        categoryMap[category] = 0;\r\n      }\r\n      categoryMap[category] += amount;\r\n    });\r\n\r\n    setTotalExpenses(total);\r\n    return Object.entries(categoryMap).map(([name, amount]) => ({ name, amount }));\r\n  }, [transactions]);\r\n\r\n  const data = useMemo(() => ({\r\n    labels: categories.map(category => category.name),\r\n    datasets: [{\r\n      data: categories.map(category => category.amount),\r\n      backgroundColor: categories.map((_, index) => `hsl(${index * 50}, 70%, 50%)`),\r\n    }],\r\n  }), [categories]);\r\n\r\n  const options = {\r\n    cutout: '70%',\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          label: function(tooltipItem) {\r\n            const percentage = ((tooltipItem.raw / totalExpenses) * 100).toFixed(2);\r\n            return `${tooltipItem.label}: ${percentage}%`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={styles.expenseChartContainer}>\r\n      <h2>Total Expenses This Month</h2>\r\n      {transactions.length > 0 ? (\r\n        <>\r\n          <Doughnut data={data} options={options} />\r\n          <ul className={styles.categoryList}>\r\n            {categories.map((category, index) => (\r\n              <li key={category.name} className={styles.categoryItem}>\r\n                <span \r\n                  className={styles.marker} \r\n                  style={{ backgroundColor: `hsl(${index * 50}, 70%, 50%)` }}\r\n                ></span>\r\n                <span>\r\n                  {category.name}: {((category.amount / totalExpenses) * 100).toFixed(2)}%\r\n                </span>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      ) : (\r\n        <p>No transactions available for this month.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ExpenseChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}